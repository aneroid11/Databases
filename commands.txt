--Создать базу данных:
create database task3;
use task3;

--Создание таблиц:

--Пользователи (Users):
create table Users (
    id int not null auto_increment,
    email varchar(255) not null unique,
    password_hash varchar(255) not null,
    role enum('artist', 'admin', 'moderator') not null,

    check(email REGEXP '(\w|\.)+@[a-z]+\.[a-z]+'),

    primary key(idUsers)
);

Артисты (Artists):
create table Artists (
    id int not null auto_increment,
    nickname varchar(100) not null unique,
    date_of_birth date,
    gender enum('male', 'female', 'other') not null,
    premium_subscription_id int unique,     -- one to one relation
    card_details_id int unique,             -- the same here

    check(date_of_birth between '1900-01-01' and sysdate()),

    primary key(id),
    foreign key(id) references Users(id) on update cascade on delete cascade,
    foreign key(premium_subscription_id) references PremiumSubscriptions(id) on update cascade on delete set null,
    foreign key(card_details_id) references CardDetails(id) on update cascade on delete set null
);

Данные банковских карт (CardDetails):
create table CardDetails (
    id int not null auto_increment,
    first_name varchar(60) not null,
    last_name varchar(80) not null,
    card_number varchar(16) not null unique,
    expiration date not null,
    
    check (card_number regexp '[0-9]{16}'),
    check (expiration > sysdate()),

    primary key(id)
);

Премиум-подписки:
create table PremiumSubscriptions (
    id int not null auto_increment,
    start_datetime datetime not null,
    end_datetime datetime not null,
    active boolean not null,
    id_tariff int not null,
    
    check (start_datetime < end_datetime and cast(start_datetime as date) > '1900-01-01'),   -- гггг-мм-дд
    check (end_datetime > sysdate()),

    primary key(id),
    foreign key(id_tariff) references Tariffs(id) on update cascade on delete restrict
);

Тарифы:
create table Tariffs (
    id int not null auto_increment,
    monthly_payment_dollars float not null,

    check (monthly_payment_dollars > 0.0),

    primary key(id)
);

Платежи:
create table Payments (
    id int not null auto_increment,
    subscription_id int not null,
    timestamp datetime not null,
    status enum('pending', 'failed', 'successful') not null,
    sum float not null,
    transaction_id varchar(100) not null unique,

    check (sum > 0.0),
    check (timestamp <= sysdate()),

    primary key(id),
    foreign key(subscription_id) references PremiumSubscriptions(id) on update cascade on delete cascade
);

Жалобы:
create table Reports (
    id int not null auto_increment,
    title varchar(50) not null,
    contents varchar(200),
    author_id int not null,
    report_type enum('Tracks', 'Artists') not null,
    object_id int not null,

    -- check (not (report_type = 'Artists' and object_id = author_id))  -- нельзя репортнуть себя
    -- и такой чек нельзя использовать вместе с on update ... или on delete ...
    -- это нужно проверять с помощью триггеров. или делать referential actions с помощью триггеров.

    primary key(id),
    foreign key(author_id) references Artists(id) on update cascade on delete cascade
);

Лайки:
create table Likes (
    id int not null auto_increment,
    artist_id int,
    track_id int not null,
    
    -- самолайк разрешён

    primary key(id),
    foreign key(artist_id) references Artists(id) on update cascade on delete set null,
    foreign key(track_id) references Tracks(id) on update cascade on delete cascade
);

Теги:
create table Tags (
    id int not null auto_increment,
    name varchar(45) not null unique,

    primary key(id)
);

Треки:
create table Tracks (
    id int not null auto_increment,
    timestamp datetime not null,
    title varchar(100) not null, -- index for title
    length_seconds int not null,
    artist_id int not null,

    check (length_seconds > 0),
    check (timestamp <= sysdate()),

    primary key(id),
    foreign key(artist_id) references Artists(id) on update cascade on delete cascade,
    index (title)
);

Связь между тегами и треками:
create table TagsToTracks (
    id int not null auto_increment,
    id_tag int not null,
    id_track int not null,

    unique(id_tag, id_track),

    primary key(id),
    foreign key(id_tag) references Tags(id) on update cascade on delete cascade,
    foreign key(id_track) references Tracks(id) on update cascade on delete cascade
);

Комментарии:
create table Comments (
    id int not null auto_increment,
    timestamp datetime not null,
    contents varchar(500) not null,
    artist_id int,
    track_id int not null,

    check (timestamp <= sysdate()),

    primary key(id),
    foreign key(artist_id) references Artists(id) on delete set null on update cascade,
    foreign key(track_id) references Tracks(id) on delete cascade on update cascade
);

Плейлисты:
create table Playlists (
    id int not null auto_increment,
    title varchar(100) not null,
    artist_id int not null,

    primary key(id),
    foreign key(artist_id) references Artists(id) on delete cascade on update cascade
);

Связь тегов с плейлистами:
create table TagsToPlaylists (
    id int not null auto_increment,
    id_tag int not null,
    id_playlist int not null,

    unique(id_tag, id_playlist),

    primary key(id),
    foreign key(id_tag) references Tags(id) on delete cascade on update cascade,
    foreign key(id_playlist) references Playlists(id) on delete cascade on update cascade
);

Связь плейлистов с треками:
create table TracksToPlaylists (
    id int not null auto_increment,
    track_id int not null,
    playlist_id int not null,

    unique (track_id, playlist_id),

    primary key(id),
    foreign key(track_id) references Tracks(id) on delete cascade on update cascade,
    foreign key(playlist_id) references Playlists(id) on delete cascade on update cascade
);

Альбомы:
create table Albums (
    id int not null auto_increment,
    release_date date not null,

    check (release_date <= sysdate()),

    primary key(id),
    foreign key(id) references Playlists(id) on update cascade on delete cascade
);

Журнал действий пользователей:
create table Actions (
    id int not null auto_increment,
    timestamp datetime not null,
    user_id int,     -- если юзер удаляется, то его действия всё равно сохраняются
    object_type enum('Users', 'Artists', 'CardDetails', 'Likes', 'Comments', 'Reports', 'PremiumSubscriptions', 'Payments', 'Tags', 'Tracks', 'Playlists', 'Albums', 'TagsToTracks', 'TagsToPlaylists', 'TracksToPlaylists') not null,
    object_id int,   -- если объект удаляется, то действия над ним всё равно остаются
    action_type enum('create', 'read', 'update', 'delete') not null,

    check (timestamp <= sysdate()),

    primary key(id),
    foreign key(user_id) references Users(id) on update cascade on delete set null
);




--ТЕСТОВЫЕ ЗНАЧЕНИЯ:

----------------------
--Users:
insert into Users (email, password_hash, role) values ('user1@example.com', 'aaaa1111aaaa1111', 'artist');
insert into Users (email, password_hash, role) values ('user2@example.com', 'aaaa1111aaaa1111', 'artist');
insert into Users (email, password_hash, role) values ('musicserviceadmin@example.com', '9ba827640bde', 'admin');
insert into Users values (4, 'mod-1@example.com', '99aaa99a9a', 'moderator');
insert into Users values (5, 'mod-2@example.com', '194590afe0', 'moderator');
insert into Users values (6, 'junoreactor@yopmail.com', '312312311', 'artist');
insert into Users values (7, 'daniellicht@example.com', '3123aaa12', 'artist');
insert into Users values (8, 'suse@example.com', '123456', 'artist');

----------------------

--Artists:
insert into Artists values (1, "Zob Rombie", null, 'male', 1, 1);
insert into Artists values (2, "User2", '1999-01-02', 'male', null, null);
insert into Artists values (6, "Juno Reactor", null, 'male', null, null);
insert into Artists values (7, "Daniel Licht", '1957-03-13', 'male', null, null);
insert into Artists values (8, "Suse", null, 'other', null, null);

----------------------
Tariffs:
insert into Tariffs (monthly_payment_dollars) values (10.3);

----------------------
CardDetails:
insert into CardDetails (first_name, last_name, card_number, expiration) values ('John', 'John', '0000000000010000', '2023-01-01');
insert into CardDetails (first_name, last_name, card_number, expiration) values ('Batt', 'Mellamy', '1111000011110000', '2026-01-01');

----------------------
PremiumSubscriptions:
insert into PremiumSubscriptions (start_datetime, end_datetime, active, id_tariff) values ('2022-11-03 11:17:02', '2022-12-03 11:17:02', true, 1);
insert into PremiumSubscriptions (start_datetime, end_datetime, active, id_tariff) values ('2022-09-20 05:05:05', '2022-12-01 01:02:03', true, 1);

----------------------
Payments:
Подписка Zob Rombie:
insert into Payments values (1, 1, '2022-11-03 11:10:03', 'failed', 10.3, '1a2bcd3');
insert into Payments values (2, 1, '2022-11-03 11:17:02', 'successful', 10.3, '1aadc33');

Подписка Suse:
insert into Payments values (3, 2, '2021-09-20 05:05:05', 'successful', 10.3, '11213ac');
insert into Payments values (4, 2, '2022-11-01 01:02:03', 'successful', 10.3, '21aa3ac');

----------------------
Reports:
insert into Reports values (1, "Offensive title", "I am not worried at all", 1, 'Tracks', 1);
insert into Reports values (2, "Offensive offense", "I am offended by that offensive person", 2, 'Artists', 1);

----------------------
TRACKS:
User2:
insert into Tracks values (1, '2022-03-30 12:00:01', 'Don\'t worry', 200, 2);
insert into Tracks values (3, '2022-04-01 13:20:20', 'HDMI', 119, 2);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2018-06-06 00:31:00', 'Drive My Car', 164, 2);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2019-09-10 00:31:00', 'Everytime', 199, 2);

Zob Rombie:
insert into Tracks values (2, '2022-02-29 12:30:01', 'Some song', 125, 1);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2021-06-06 12:00:00', 'Dragula', 222, 1);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2020-03-01 09:00:00', 'Feel So Numb', 243, 1);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2022-03-01 09:30:00', 'Iron Head', 250, 1);

Juno Reactor:
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2020-03-01 09:30:00', 'Control', 250, 6);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2021-01-03 19:30:30', 'Mona Lisa Overdrive', 300, 6);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2011-01-03 19:22:30', 'Dakota', 120, 6);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2015-02-03 15:22:30', 'Guardian Angel', 230, 6);

Daniel Licht:
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2021-05-05 10:30:00', 'Wink', 129, 7);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2022-06-03 20:31:30', 'Empress Death', 65, 7);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2014-02-03 19:22:30', 'Flooded Suspense', 185, 7);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2015-03-03 15:22:30', 'Corvo Attano\'s Theme', 102, 7);

Suse:
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2010-02-05 09:30:00', 'Supermassive Black Hole', 212, 8);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2015-03-03 20:31:30', 'Hysteria', 226, 8);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2016-02-03 19:22:30', 'New Born', 170, 8);
insert into Tracks (timestamp, title, length_seconds, artist_id) values ('2017-03-03 15:22:30', 'Feeling Good', 192, 8);

----------------------
Likes:
insert into Likes values (1, 1, 1);
insert into Likes (artist_id, track_id) values (1, 19);
insert into Likes (artist_id, track_id) values (1, 10);
insert into Likes (artist_id, track_id) values (1, 14);
insert into Likes (artist_id, track_id) values (1, 16);

insert into Likes (artist_id, track_id) values (2, 6);
insert into Likes (artist_id, track_id) values (2, 7);
insert into Likes (artist_id, track_id) values (2, 8);
insert into Likes (artist_id, track_id) values (2, 14);

insert into Likes (artist_id, track_id) values (6, 13);
insert into Likes (artist_id, track_id) values (6, 14);
insert into Likes (artist_id, track_id) values (6, 15);

insert into Likes (artist_id, track_id) values (7, 4);
insert into Likes (artist_id, track_id) values (7, 5);
insert into Likes (artist_id, track_id) values (7, 6);

insert into Likes (artist_id, track_id) values (8, 11);
insert into Likes (artist_id, track_id) values (8, 13);
insert into Likes (artist_id, track_id) values (8, 14);
insert into Likes (artist_id, track_id) values (8, 15);

----------------------
Tags:
insert into Tags values (1, "rock");
insert into Tags values (2, "indie");
insert into Tags values (3, "pop");
insert into Tags (name) values ("transe");
insert into Tags (name) values ("instrumental");
insert into Tags (name) values ("soundtrack");

----------------------
TagsToTracks:
insert into TagsToTracks (id_tag, id_track) values (2, 1);
insert into TagsToTracks (id_tag, id_track) values (1, 1);
insert into TagsToTracks (id_tag, id_track) values (3, 2);

insert into TagsToTracks (id_tag, id_track) values (1, 4);
insert into TagsToTracks (id_tag, id_track) values (1, 5);
insert into TagsToTracks (id_tag, id_track) values (1, 6);
insert into TagsToTracks (id_tag, id_track) values (1, 10);
insert into TagsToTracks (id_tag, id_track) values (1, 17);
insert into TagsToTracks (id_tag, id_track) values (1, 18);
insert into TagsToTracks (id_tag, id_track) values (1, 19);
insert into TagsToTracks (id_tag, id_track) values (1, 20);

insert into TagsToTracks (id_tag, id_track) values (2, 3);
insert into TagsToTracks (id_tag, id_track) values (2, 7);
insert into TagsToTracks (id_tag, id_track) values (2, 8);

insert into TagsToTracks (id_tag, id_track) values (3, 9);
insert into TagsToTracks (id_tag, id_track) values (3, 11);

insert into TagsToTracks (id_tag, id_track) values (4, 9);
insert into TagsToTracks (id_tag, id_track) values (4, 12);

insert into TagsToTracks (id_tag, id_track) values (5, 13);
insert into TagsToTracks (id_tag, id_track) values (5, 14);
insert into TagsToTracks (id_tag, id_track) values (5, 15);
insert into TagsToTracks (id_tag, id_track) values (5, 16);

insert into TagsToTracks (id_tag, id_track) values (6, 13);
insert into TagsToTracks (id_tag, id_track) values (6, 14);
insert into TagsToTracks (id_tag, id_track) values (6, 15);
insert into TagsToTracks (id_tag, id_track) values (6, 16);

----------------------
Comments:
insert into Comments values (1, '2022-03-30 12:00:30', 'I am not worried, I am going to report this track', 1, 1);
insert into Comments (timestamp, contents, artist_id, track_id) values ('2022-04-02 12:31:31', 'Good track!', 1, 3);
insert into Comments (timestamp, contents, artist_id, track_id) values ('2021-03-01 12:31:31', 'Another good track from you', 1, 5);
insert into Comments (timestamp, contents, artist_id, track_id) values ('2021-05-06 11:10:20', 'I really like the strings', 7, 5);

----------------------
Playlists:
insert into Playlists values (1, "Good tracks", 1);
insert into Playlists values (2, "Example album containing two tracks", 2);
insert into Playlists (title, artist_id) values ("Dishonored Soundtrack", 7);
insert into Playlists values (4, "Revelations and Black Holes", 8);

----------------------
TracksToPlaylists:
insert into TracksToPlaylists values (1, 1, 1);
insert into TracksToPlaylists values (2, 2, 1);
insert into TracksToPlaylists (track_id, playlist_id) values (3, 1);
insert into TracksToPlaylists (track_id, playlist_id) values (1, 2);
insert into TracksToPlaylists (track_id, playlist_id) values (3, 2);

insert into TracksToPlaylists (track_id, playlist_id) values (14, 3);
insert into TracksToPlaylists (track_id, playlist_id) values (15, 3);
insert into TracksToPlaylists (track_id, playlist_id) values (16, 3);

insert into TracksToPlaylists (track_id, playlist_id) values (17, 4);
insert into TracksToPlaylists (track_id, playlist_id) values (19, 4);
insert into TracksToPlaylists (track_id, playlist_id) values (20, 4);

----------------------
TagsToPlaylists:
insert into TagsToPlaylists (id_tag, id_playlist) values (1, 1);
insert into TagsToPlaylists values (2, 2, 2);
insert into TagsToPlaylists (id_tag, id_playlist) values (1, 4);

----------------------
Albums:
insert into Albums values (2, '2022-04-01');
insert into Albums values (3, '2022-04-02');
insert into Albums values (4, '2017-03-04');

----------------------
Actions:
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-01 02:00:00', 3, 'Users', 4, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-01 02:01:00', 3, 'Users', 5, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-02-10 12:01:00', 1, 'Users', 1, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-02-10 12:01:00', 1, 'Artists', 1, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-15 13:01:00', 2, 'Users', 2, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-15 13:01:00', 2, 'Artists', 2, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-16 13:01:00', 6, 'Users', 6, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-16 13:01:00', 6, 'Artists', 6, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-16 11:00:30', 7, 'Users', 7, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-16 11:00:30', 7, 'Artists', 7, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-17 11:00:30', 8, 'Users', 8, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-01-17 11:00:30', 8, 'Artists', 8, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2020-03-01 09:00:00', 1, 'Tracks', 5, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-06-06 12:00:00', 1, 'Tracks', 4, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-02-28 12:30:01', 1, 'Tracks', 2, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-01 09:30:00', 1, 'Tracks', 6, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2018-06-06 00:31:00', 2, 'Tracks', 7, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2019-09-10 00:31:00', 2, 'Tracks', 8, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-30 12:00:01', 2, 'Tracks', 1, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-04-01 13:20:20', 2, 'Tracks', 3, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2011-01-03 19:22:30', 6, 'Tracks', 11, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-02-03 15:22:30', 6, 'Tracks', 12, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2020-03-01 09:30:00', 6, 'Tracks', 9, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-01-03 19:30:30', 6, 'Tracks', 10, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2014-02-03 19:22:30', 7, 'Tracks', 15, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-03-03 15:22:30', 7, 'Tracks', 16, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-05-05 10:30:00', 7, 'Tracks', 13, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-03 20:31:30', 7, 'Tracks', 14, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-02-05 09:30:00', 8, 'Tracks', 17, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-03-03 20:31:30', 8, 'Tracks', 18, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2016-02-03 19:22:30', 8, 'Tracks', 19, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2017-03-03 15:22:30', 8, 'Tracks', 20, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-02-05 09:30:00', 8, 'Tags', 1, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2011-01-03 19:22:30', 6, 'Tags', 3, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2014-02-03 19:22:30', 7, 'Tags', 5, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2014-02-03 19:22:30', 7, 'Tags', 6, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-02-03 15:22:30', 6, 'Tags', 4, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2018-06-06 00:31:00', 2, 'Tags', 2, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-30 12:00:01', 2, 'TagsToTracks', 1, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-30 12:00:01', 2, 'TagsToTracks', 2, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-02-28 12:30:01', 1, 'TagsToTracks', 3, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-04-01 13:20:20', 2, 'TagsToTracks', 15, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-06-06 12:00:00', 1, 'TagsToTracks', 7, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2020-03-01 09:00:00', 1, 'TagsToTracks', 8, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-01 09:30:00', 1, 'TagsToTracks', 9, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2018-06-06 00:31:00', 2, 'TagsToTracks', 16, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2019-09-10 00:31:00', 2, 'TagsToTracks', 17, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2020-03-01 09:30:00', 6, 'TagsToTracks', 18, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2020-03-01 09:30:00', 6, 'TagsToTracks', 20, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-01-03 19:30:30', 6, 'TagsToTracks', 10, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2011-01-03 19:22:30', 6, 'TagsToTracks', 19, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-02-03 15:22:30', 6, 'TagsToTracks', 21, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-02-03 15:22:30', 7, 'TagsToTracks', 23, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-05-05 10:30:00', 7, 'TagsToTracks', 27, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-03 20:31:30', 7, 'TagsToTracks', 24, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-03 20:31:30', 7, 'TagsToTracks', 28, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2014-02-03 19:22:30', 7, 'TagsToTracks', 25, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2014-02-03 19:22:30', 7, 'TagsToTracks', 29, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-03-03 15:22:30', 7, 'TagsToTracks', 26, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-03-03 15:22:30', 7, 'TagsToTracks', 30, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2010-02-05 09:30:00', 8, 'TagsToTracks', 11, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-03-03 20:31:30', 8, 'TagsToTracks', 12, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2016-02-03 19:22:30', 8, 'TagsToTracks', 13, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2017-03-03 15:22:30', 8, 'TagsToTracks', 14, 'create');

insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-04-30 12:00:01', 1, 'Likes', 1, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2016-04-03 19:22:30', 1, 'Likes', 2, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2021-02-03 19:30:30', 1, 'Likes', 3, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-07-03 20:31:30', 1, 'Likes', 4, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2015-04-03 15:22:30', 1, 'Likes', 5, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-03-01 09:30:00', 2, 'Likes', 6, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2018-07-06 00:31:00', 2, 'Likes', 7, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2019-10-10 00:31:00', 2, 'Likes', 8, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-07-03 20:31:30', 2, 'Likes', 9, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-04 20:31:30', 6, 'Likes', 10, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-05 20:31:30', 6, 'Likes', 11, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-06 20:31:30', 6, 'Likes', 12, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-07 20:31:30', 7, 'Likes', 13, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-08 20:31:30', 7, 'Likes', 14, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-09 20:31:30', 7, 'Likes', 15, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-10 20:31:30', 8, 'Likes', 16, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-11 20:31:30', 8, 'Likes', 17, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-12 20:31:30', 8, 'Likes', 18, 'create');
insert into Actions (timestamp, user_id, object_type, object_id, action_type) values ('2022-06-13 20:31:30', 8, 'Likes', 19, 'create');

-------------------------------------------------------------------------

--ЗАПРОСЫ:

--Процедура для логирования:

delimiter //

create procedure Log (user_id int, object_type enum('Users', 'Artists', 'CardDetails', 'Likes', 'Comments', 'Reports', 'PremiumSubscriptions', 'Payments', 'Tags', 'Tracks', 'Playlists', 'Albums', 'TagsToTracks', 'TagsToPlaylists', 'TracksToPlaylists'), object_id int, action_type enum('create', 'read', 'update', 'delete'))
begin
    insert into Actions (timestamp, user_id, object_type, object_id, action_type) values (CURRENT_TIMESTAMP(), user_id, object_type, object_id, action_type);
end//


Регистрация артиста:

id int not null auto_increment,
email varchar(255) not null unique,
password_hash varchar(255) not null,
nickname varchar(100) not null unique,
date_of_birth date,
gender enum('male', 'female', 'other') not null,

create procedure RegisterArtist(email varchar(255), password_hash varchar(255), nickname varchar(100), date_of_birth date, gender enum('male', 'female', 'other'))
begin
    insert into Users (email, password_hash, role) values (email, password_hash, 'artist');
    
    if row_count() > 0 then
        -- previous insert was successful
        insert into Artists values (last_insert_id(), nickname, date_of_birth, gender, NULL, NULL);
    end if;
end//


--Создать вьюшку для информации об артисте:

create view ArtistsInfo as 
select Users.id, Users.email, Users.password_hash, Artists.nickname, Artists.date_of_birth, Artists.gender, Artists.premium_subscription_id, Artists.card_details_id 
from Users 
right join Artists on Users.id = Artists.id;


--Просмотреть всю информацию об артисте:

select * from ArtistInfo where id = <artist id>;
-- insert into Actions (timestamp, user_id, object_type, object_id, action_type) values (<current timestamp>, <watching artist id>, 'Artists', <watched artist id>, 'read');

--Поиск артиста по никнейму:
select * from Artists where LOWER(nickname) like LOWER("%<search>%");
select * from ArtistsInfo where LOWER(nickname) like LOWER("%<search>%");


-- Изменить информацию об артисте:
update Artists set nickname = <nickname> where id = <artist id>
-- insert into Actions (timestamp, user_id, object_type, object_id, action_type) values (<current timestamp>, <artist id>, 'Artists', <artist id>, 'edit');


-- Удалить аккаунт артиста:
create procedure DeleteArtistAccount(id int)
begin
    delete from Artists where Artists.id = id;
    
    -- delete all orphaned PremiumSubscriptions and CardDetails:
    delete from PremiumSubscriptions where PremiumSubscriptions.id not in (select premium_subscription_id from Artists where premium_subscription_id is not null);    
    delete from CardDetails where CardDetails.id not in (select card_details_id from Artists where card_details_id is not null);
    -- insert into Actions (timestamp, user_id, object_type, object_id, action_type) values (<current timestamp>, <artist id>, 'Artists', <artist id>, 'delete');
end//


id int not null auto_increment,
    timestamp datetime not null,
    title varchar(100) not null, -- index for title
    length_seconds int not null,
    artist_id int not null,

-- Загрузка артистом треков на сайт:
create procedure UploadTrack(title varchar(100), length_seconds int, artist_id int)
begin
    insert into Tracks (timestamp, title, length_seconds, artist_id) values (CURRENT_TIMESTAMP(), title, length_seconds, artist_id);
    -- insert into Actions (timestamp, user_id, object_type, object_id, action_type) values (<current timestamp>, <artist id>, 'Tracks', LAST_INSERT_ID(), 'create');
end//


-- Прикрепить тег <tag name> к треку <track id>:
create procedure AttachTagToTrack(tag_name varchar(45), track_id int)
begin
    insert into Tags (name) values (tag_name); -- will fail if the tag exists
    insert into TagsToTracks (id_tag, id_track) select id, track_id from Tags where name = tag_name;
end//


Просмотреть всю информацию о треке <track id>:
Вьюшка для этого:
create view TracksInfo as 
select Tracks.id, Tracks.timestamp, Tracks.title, Tracks.length_seconds, Artists.nickname 
from Tracks 
right join Artists 
on Tracks.artist_id = Artists.id;

select * from TracksInfo where Tracks.id = <track id>;

Количество треков у артистов:
select count(Tracks.id) total_tracks, Artists.nickname 
from Tracks 
inner join Artists on Artists.id = Tracks.artist_id  
group by artist_id;

Комментировать трек <track id> от <artist id>:
insert into Comments (timestamp, contents, artist_id, track_id) values (<current timestamp>, <contents>, <artist id>, <track id>);

Отредактировать трек <track id>:
update Tracks set timestamp = <current timestamp>, title = <new title>, length_seconds = <new length> where id = <track id>;

Удалить трек <track id>:
delete from Tracks where id = <track id>;

Лайкнуть трек <track id> от <artist id>:
insert into Likes (artist_id, track_id) values (<artist id>, <track id>);

Пожаловаться на трек <track id> от <artist id>:
insert into Reports (title, contents, author_id, report_type, object_id) values (<title>, <contents>, <author id>, 'Tracks', <track id>);

Пожаловаться на артиста <reported artist id> от <reporting artist id>:
insert into Reports (title, contents, author_id, report_type, object_id) values (<title>, <contents>, <reporting artist id>, 'Artists', <reported artist id>);

Создать плейлист от <artist id>:
insert into Playlists (title, artist_id) values (<playlist title>, <artist id>);

Отредактировать плейлист:
update Playlists set title = <new title> where id = <playlist id>;

Удалить плейлист:
delete from Playlists where id = <playlist id>;

Добавить трек <track id> в плейлист <playlist id>:
insert into TracksToPlaylists (track_id, artist_id) values (<track id>, <playlist id>);

Удалить трек <track id> из плейлиста <playlist id>:
delete from TracksToPlaylists where track_id = <track id> and playlist_id = <playlist_id>;

Информация о треках, принадлежащих плейлистам:
create view TracksPlaylistsInfo as
select TracksToPlaylists.playlist_id, TracksToPlaylists.track_id, Tracks.timestamp, Tracks.title, Tracks.length_seconds, Tracks.artist_id 
from TracksToPlaylists 
inner join Tracks 
on Tracks.id = TracksToPlaylists.track_id;

Просмотреть все треки в плейлисте <playlist id>:
select * from TracksPlaylistsInfo where playlist_id = <playlist id>;

Создать альбом <title>, <release date> от <artist id>:
insert into Playlists (title, artist_id) values (<title>, <artist id>);
insert into Albums values (last_inserted_id(), <release date>);

Вьюшка для информации об альбомах:
create view AlbumsInfo as 
select Albums.id, Albums.release_date, Playlists.title, Artists.nickname as author_name 
from Albums 
inner join Playlists on Albums.id = Playlists.id 
inner join Artists on Playlists.artist_id = Artists.id;

Просмотреть информацию об альбоме:
select * from AlbumsInfo where id = <album id>;

Удалить альбом:
delete from Playlists where id = <album id>;

Посмотреть общую продолжительность треков для каждого артиста:
select sum(Tracks.length_seconds) total_tracks_time, Artists.nickname, Tracks.artist_id  
from Tracks 
inner join Artists on Artists.id = Tracks.artist_id 
group by artist_id;

Посмотреть общую продолжительность треков для отдельного артиста:
select sum(Tracks.length_seconds) total_tracks_time, Artists.nickname, Tracks.artist_id  
from Tracks 
inner join Artists on Artists.id = Tracks.artist_id 
where artist_id = <artist id>;

Количество лайков на треке:
select count(id) num_of_likes from Likes where track_id = <track id>;

Посмотреть топ-10 самых залайканных треков:
select Tracks.id, Tracks.title, count(Likes.id) as likes_count, 
    case
        when count(Likes.id) > 2 then "superstar"
        else ""
    end as commentary
from Likes 
inner join Tracks on Tracks.id = Likes.track_id 
group by Likes.track_id 
order by likes_count desc 
limit 10;

Приобрести премиум-подписку:
insert into CardDetails (first_name, last_name, card_number, expiration) values (<first name>, <last name>, <card number>, <expiration date>);
update Artists set card_details_id = last_inserted_id() where id = <artist id>; -- а что, если инсерт зафейлился? например, card_number уже существует.

insert into PremiumSubscriptions (start_datetime, end_datetime, active, id_tariff) values (<current timestamp>, <current timestamp>, FALSE, <tariff id>);

insert into Payments (subscription_id, timestamp, status, sum, transaction_id) 
select last_insert_id(), <current timestamp>, 'successful', Tariffs.monthly_payment_dollars 
from Tariffs where id = <tariff id>;

-- после успешной оплаты:
update PremiumSubscriptions set end_datetime = DATE_ADD(end_datetime, interval 1 month), active = TRUE where id = <subscription id>;

Просмотреть все жалобы:
select * from Reports;

Просмотреть жалобы на пользователя <user id>:
select * from Reports where object_id = <user id> and report_type = "Artists";

Просмотреть жалобы на трек <track id>:
select * from Reports where object_id = <track id> and report_type = 'Tracks';

Просмотреть действия пользователя:
select * from Actions where user_id = <user id> order by timestamp;


