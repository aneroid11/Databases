Создать базу данных:
create database task3;
use task3;

Создание таблиц:

Пользователи (Users):
create table Users (
    id int not null auto_increment,
    email varchar(255) not null unique check(email REGEXP '(\w|\.)+@[a-z]+\.[a-z]+'),
    password_hash varchar(255) not null,
    role enum('artist', 'admin', 'moderator') not null,

    primary key(idUsers)
);

Артисты (Artists):
create table Artists (
    id int not null auto_increment,
    nickname varchar(100) not null unique,
    date_of_birth date,
    gender enum('male', 'female', 'nonbinary') not null,
    premium_subscription_id int unique,     -- one to one relation
    card_details_id int unique,             -- the same here

    check(date_of_birth > '1900-01-01'),

    primary key(id),
    foreign key(id) references Users(id),
    foreign key(premium_subscription_id) references PremiumSubscriptions(id),
    foreign key(card_details_id) references CardDetails(id)
);

/* is not executed for some reason

create trigger date_check
before insert on CardDetails
for each row
begin
    if new.expiration_date <= curdate() then
        signal sqlstate '45000' 
            set message_text = 'Card expiration date <= current date!';
    end if;
end;*/

Данные банковских карт (CardDetails):
create table CardDetails (
    id int not null auto_increment,
    first_name varchar(60) not null,
    last_name varchar(80) not null,
    card_number varchar(16) not null unique,
    expiration date not null,
    
    check (card_number regexp '[0-9]{16}'),
    -- check (expiration > curdate()), -- так сделать нельзя, т. к. curdate() не детерминирована

    primary key(id)
);

Премиум-подписки:
create table PremiumSubscriptions (
    id int not null auto_increment,
    start_datetime datetime not null,
    end_datetime datetime not null,
    active boolean not null,
    id_tariff int not null,
    
    check (start_datetime < end_datetime and cast(start_datetime as date) > '1900-01-01'),   -- гггг-мм-дд
    -- check(end_datetime > getdate()),

    primary key(id),
    foreign key(id_tariff) references Tariffs(id)
);

Тарифы:
create table Tariffs (
    id int not null auto_increment,
    monthly_payment_dollars float not null,

    check (monthly_payment_dollars > 0.0),

    primary key(id)
);

Платежи:
create table Payments (
    id int not null auto_increment,
    subscription_id int not null,
    timestamp datetime not null,
    status enum('pending', 'failed', 'successful') not null,
    sum float not null,
    transaction_id varchar(100) not null unique,

    check (sum > 0.0),
    -- check (timestamp <= getdate())

    primary key(id)
);

Жалобы:
create table Reports (
    id int not null auto_increment,
    title varchar(50) not null,
    contents varchar(200),
    author_id int not null,
    report_type enum('Tracks', 'Artists') not null,
    object_id int not null,

    check (not (report_type = 'Artists' and object_id = author_id))  -- you cannot report yourself

    primary key(id),
    foreign key(author_id) references Artists(id)
);

Лайки:
create table Likes (
    id int not null auto_increment,
    artist_id int,
    track_id int not null,
    
    -- check for self-like?
    -- check (not ()),

    primary key(id),
    foreign key(artist_id) references Artists(id),
    foreign key(track_id) references Tracks(id)
);

Теги:
create table Tags (
    id int not null auto_increment,
    name varchar(45) not null,

    primary key(id)
);

Треки:
create table Tracks (
    id int not null auto_increment,
    timestamp datetime not null,
    title varchar(100) not null,
    length_seconds int not null,
    artist_id int not null,

    -- check (timestamp <= getdate()),
    check (length_seconds > 0),

    primary key(id),
    foreign key(artist_id) references Artists(id)
);

Связь между тегами и треками:
create table TagsToTracks (
    id int not null auto_increment,
    id_tag int not null,
    id_track int not null,

    primary key(id),
    foreign key(id_tag) references Tags(id),
    foreign key(id_track) references Tracks(id)
);

Комментарии:
create table Comments (
    id int not null auto_increment,
    timestamp datetime not null,
    contents varchar(500) not null,
    artist_id int,
    track_id int not null,

    -- check (timestamp <= curdate()),
    -- проверять, что комментарий появился позже трека

    primary key(id),
    foreign key(artist_id) references Artists(id),
    foreign key(track_id) references Tracks(id)
);

Плейлисты:
create table Playlists (
    id int not null auto_increment,
    title varchar(100) not null,
    artist_id int not null,

    primary key(id),
    foreign key(artist_id) references Artists(id)
);

Связь тегов с плейлистами:
create table TagsToPlaylists (
    id int not null auto_increment,
    id_tag int not null,
    id_playlist int not null,

    primary key(id),
    foreign key(id_tag) references Tags(id),
    foreign key(id_playlist) references Playlists(id)
);

Связь плейлистов с треками:
create table TracksToPlaylists (
    id int not null auto_increment,
    track_id int not null,
    playlist_id int not null,

    primary key(id),
    foreign key(track_id) references Tracks(id),
    foreign key(playlist_id) references Playlists(id)
);

Альбомы:
create table Albums (
    id int not null auto_increment,
    release_date date not null,

    -- check (release_date <= cast(getdate() as date)),

    primary key(id),
    foreign key(id) references Playlists(id)
);



Журнал действий пользователей:
create table Actions (
    idActions int not null auto_increment,
    timestamp datetime not null,
    user_id int,     -- если юзер удаляется, то его действия всё равно сохраняются
    object_type enum('Users', 'Artists', 'CardDetails', 'Likes', 'Comments', 'Reports', 'PremiumSubscriptions', 'Payments', 'Tags', 'Tracks', 'Playlists', 'Albums') not null,
    object_id int,   -- если объект удаляется, то действия над ним всё равно остаются
    action_type enum('create', 'read', 'update', 'delete') not null,

    -- check (timestamp <= getdate())

    primary key(idActions),
    foreign key(user_id) references Users(idUsers)
);


ТЕСТОВЫЕ ЗНАЧЕНИЯ:


Users:
insert into Users (email, password_hash, role) values ('user1@example.com', 'aaaa1111aaaa1111', 'artist');
insert into Users (email, password_hash, role) values ('user2@example.com', 'aaaa1111aaaa1111', 'artist');

CardDetails:
insert into CardDetails (first_name, last_name, card_number, expiration) values ('John', 'John', '0000000000010000', '2023-01-01');

Tariffs:
insert into Tariffs (monthly_payment_dollars) values (10.3);

PremiumSubscriptions:
insert into PremiumSubscriptions (start_datetime, end_datetime, active, id_tariff) values ('2022-11-03 11:17:02', '2022-12-03 11:17:02', true, 1);

Artists:
insert into Artists values (1, "Zob Rombie", null, 'male', 1, 1);
insert into Artists values (2, "User2", '1999-01-02', 'male', null, null);

Payments:
insert into Payments values (1, 1, '2022-11-03 11:10:03', 'failed', 10.3, '1a2bcd3');
insert into Payments values (2, 1, '2022-11-03 11:17:02', 'successful', 10.3, '1aadc33');

Reports:
insert into Reports values (1, "Offensive title", "I am not worried at all", 1, 'Tracks', 1);
insert into Reports values (2, "Offensive offense", "I am offended by that offensive person", 2, 'Artists', 1);

Tracks:
insert into Tracks values (1, '2022-03-30 12:00:01', 'Don\'t worry', 200, 2);
insert into Tracks values (1, '2022-02-29 12:30:01', 'Some song', 125, 1);

Likes:
insert into Likes values (1, 1, 1);

Tags:
insert into Tags values (1, "rock");
insert into Tags values (2, "indie");
insert into Tags values (3, "pop");

TagsToTracks:
insert into TagsToTracks (id_tag, id_track) values (2, 1);
insert into TagsToTracks (id_tag, id_track) values (1, 1);
insert into TagsToTracks (id_tag, id_track) values (3, 2);

Comments:
insert into Comments values (1, '2022-03-30 12:00:30', 'I am not worried, I am going to report this track', 1, 1);

Playlists:
insert into Playlists values (1, "Good tracks", 1);

TracksToPlaylists:
insert into TracksToPlaylists values (1, 1, 1);
insert into TracksToPlaylists values (2, 2, 1);

TagsToPlaylists:
insert into TagsToPlaylists (id_tag, id_playlist) values (1, 1);


